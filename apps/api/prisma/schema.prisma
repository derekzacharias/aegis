generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                     String                  @id @default(cuid())
  name                   String
  slug                   String                  @unique
  impactLevel            ImpactLevel             @default(MODERATE)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  users                  User[]
  frameworks             Framework[]
  assessments            AssessmentProject[]
  evidenceItems          EvidenceItem[]
  tasks                  Task[]
  reports                ReportArtifact[]
  integrations           IntegrationConnection[]
  policies               PolicyDocument[]
  evidenceUploadRequests EvidenceUploadRequest[]
  schedules              Schedule[]
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  firstName               String?
  lastName                String?
  passwordHash            String?
  refreshTokenHash        String?
  lastLoginAt             DateTime?
  role                    UserRole                @default(ANALYST)
  organization            Organization            @relation(fields: [organizationId], references: [id])
  organizationId          String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  assessments             AssessmentProject[]     @relation("AssessmentOwners")
  uploadedEvidence        EvidenceItem[]          @relation("EvidenceUploadedBy")
  reviewAssignments       EvidenceItem[]          @relation("EvidenceReviewer")
  evidenceUploadRequests  EvidenceUploadRequest[] @relation("EvidenceUploadRequestedBy")
  evidenceStatusChanges   EvidenceStatusHistory[] @relation("EvidenceStatusChangedBy")
  ownedPolicies           PolicyDocument[]
  createdPolicyVersions   PolicyVersion[]         @relation("CreatedPolicyVersions")
  submittedPolicyVersions PolicyVersion[]         @relation("SubmittedPolicyVersions")
  approvedPolicyVersions  PolicyVersion[]         @relation("ApprovedPolicyVersions")
  policyApprovals         PolicyApproval[]
  assessmentControls      AssessmentControl[]
  tasks                   Task[]
  reportRequests          ReportArtifact[]
  ownedSchedules          Schedule[]              @relation("ScheduleOwner")
}

model Framework {
  id                    String                @id
  name                  String
  version               String
  description           String
  family                FrameworkFamily
  controlCount          Int
  organization          Organization?         @relation(fields: [organizationId], references: [id])
  organizationId        String?
  controls              Control[]
  assessmentMemberships AssessmentFramework[]
  evidenceMappings      EvidenceFramework[]
}

model Control {
  id                 String              @id
  framework          Framework           @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  frameworkId        String
  family             String
  title              String
  description        String
  priority           ControlPriority     @default(P2)
  sourceMappings     ControlMapping[]    @relation("ControlMappings")
  targetMappings     ControlMapping[]    @relation("TargetMappings")
  assessmentControls AssessmentControl[]
}

model ControlMapping {
  id              String                       @id @default(cuid())
  sourceControl   Control                      @relation("ControlMappings", fields: [sourceControlId], references: [id])
  sourceControlId String
  targetControl   Control                      @relation("TargetMappings", fields: [targetControlId], references: [id])
  targetControlId String
  confidence      Float                        @default(0.5)
  rationale       String?
  tags            String[]                     @default([])
  origin          ControlMappingOrigin         @default(SEED)
  evidenceHints   ControlMappingEvidenceHint[]
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt

  @@unique([sourceControlId, targetControlId])
}

model ControlMappingEvidenceHint {
  id         String         @id @default(cuid())
  mapping    ControlMapping @relation(fields: [mappingId], references: [id], onDelete: Cascade)
  mappingId  String
  evidence   EvidenceItem?  @relation(fields: [evidenceId], references: [id])
  evidenceId String?
  summary    String
  rationale  String?
  score      Float          @default(0.5)
  createdAt  DateTime       @default(now())
}

model AssessmentProject {
  id                  String                @id @default(cuid())
  name                String
  status              AssessmentStatus      @default(DRAFT)
  organization        Organization          @relation(fields: [organizationId], references: [id])
  organizationId      String
  owner               User?                 @relation("AssessmentOwners", fields: [ownerId], references: [id])
  ownerId             String?
  ownerEmail          String?
  targetMaturity      Int?                  @db.SmallInt
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  controls            AssessmentControl[]
  frameworks          AssessmentFramework[]
  reports             ReportArtifact[]
  tasks               Task[]
  progressSatisfied   Int                   @default(0)
  progressPartial     Int                   @default(0)
  progressUnsatisfied Int                   @default(0)
  progressTotal       Int                   @default(0)
}

model AssessmentFramework {
  id           String            @id @default(cuid())
  assessment   AssessmentProject @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId String
  framework    Framework         @relation(fields: [frameworkId], references: [id])
  frameworkId  String
}

model AssessmentControl {
  id            String               @id @default(cuid())
  assessment    AssessmentProject    @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId  String
  control       Control              @relation(fields: [controlId], references: [id])
  controlId     String
  status        ControlStatus        @default(UNASSESSED)
  owner         User?                @relation(fields: [ownerId], references: [id])
  ownerId       String?
  dueDate       DateTime?
  comments      String?
  evidenceLinks AssessmentEvidence[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model EvidenceItem {
  id                  String                       @id @default(cuid())
  organization        Organization                 @relation(fields: [organizationId], references: [id])
  organizationId      String
  name                String
  storageUri          String
  storageKey          String
  storageProvider     EvidenceStorageProvider      @default(S3)
  originalFilename    String
  contentType         String
  fileSize            Int
  fileType            String                       @default("pdf")
  sizeInKb            Int                          @default(0)
  checksum            String?
  metadata            Json
  uploadedBy          User?                        @relation("EvidenceUploadedBy", fields: [uploadedById], references: [id])
  uploadedById        String?
  uploadedByEmail     String?
  reviewer            User?                        @relation("EvidenceReviewer", fields: [reviewerId], references: [id])
  reviewerId          String?
  uploadRequest       EvidenceUploadRequest?       @relation("UploadToEvidence", fields: [uploadRequestId], references: [id])
  uploadRequestId     String?                      @unique
  uploadedAt          DateTime                     @default(now())
  reviewDue           DateTime?
  retentionPeriodDays Int?
  retentionExpiresAt  DateTime?
  retentionReason     String?
  status              EvidenceStatus               @default(PENDING)
  ingestionStatus     EvidenceIngestionStatus      @default(PENDING)
  ingestionNotes      String?
  lastStatusChangeAt  DateTime                     @default(now())
  lastReviewed        DateTime?
  nextAction          String?
  displayControlIds   String[]                     @default([])
  displayFrameworkIds String[]                     @default([])
  controls            AssessmentEvidence[]
  frameworks          EvidenceFramework[]
  mappingHints        ControlMappingEvidenceHint[]
  statusHistory       EvidenceStatusHistory[]
}

model EvidenceUploadRequest {
  id              String                  @id @default(cuid())
  organization    Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  requestedBy     User?                   @relation("EvidenceUploadRequestedBy", fields: [requestedById], references: [id])
  requestedById   String?
  fileName        String
  contentType     String
  sizeInBytes     Int
  checksum        String?
  storageProvider EvidenceStorageProvider @default(S3)
  storageKey      String
  uploadUrl       String?
  uploadAuthToken String
  status          EvidenceUploadStatus    @default(PENDING)
  uploadExpiresAt DateTime
  uploadedAt      DateTime?
  confirmedAt     DateTime?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  evidence        EvidenceItem?           @relation("UploadToEvidence")
}

model EvidenceStatusHistory {
  id          String          @id @default(cuid())
  evidence    EvidenceItem    @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  evidenceId  String
  fromStatus  EvidenceStatus?
  toStatus    EvidenceStatus
  note        String?
  changedAt   DateTime        @default(now())
  changedBy   User?           @relation("EvidenceStatusChangedBy", fields: [changedById], references: [id])
  changedById String?
}

model EvidenceFramework {
  id          String       @id @default(cuid())
  evidence    EvidenceItem @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  evidenceId  String
  framework   Framework    @relation(fields: [frameworkId], references: [id])
  frameworkId String
}

model AssessmentEvidence {
  id                  String            @id @default(cuid())
  assessmentControl   AssessmentControl @relation(fields: [assessmentControlId], references: [id], onDelete: Cascade)
  assessmentControlId String
  evidence            EvidenceItem      @relation(fields: [evidenceId], references: [id])
  evidenceId          String
}

model Task {
  id             String             @id @default(cuid())
  assessment     AssessmentProject? @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId   String?
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String
  title          String
  description    String?
  status         TaskStatus         @default(OPEN)
  priority       TaskPriority       @default(MEDIUM)
  owner          User?              @relation(fields: [ownerId], references: [id])
  ownerId        String?
  dueDate        DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model ReportArtifact {
  id             String            @id @default(cuid())
  assessment     AssessmentProject @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId   String
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
  format         ReportFormat
  storageUri     String
  requestedBy    User?             @relation(fields: [requestedById], references: [id])
  requestedById  String?
  createdAt      DateTime          @default(now())
}

model IntegrationConnection {
  id                 String                      @id @default(cuid())
  organization       Organization                @relation(fields: [organizationId], references: [id])
  organizationId     String
  provider           IntegrationProvider
  clientId           String
  clientSecret       String
  baseUrl            String
  oauthAccessToken   String?
  oauthRefreshToken  String?
  oauthExpiresAt     DateTime?
  oauthScopes        String[]                    @default([])
  webhookSecret      String?
  webhookUrl         String?
  mappingPreferences Json?
  lastSyncedAt       DateTime?
  lastWebhookAt      DateTime?
  status             IntegrationConnectionStatus @default(PENDING)
  statusMessage      String?
  syncCursor         String?
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
}

model Schedule {
  id             String            @id @default(cuid())
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  owner          User?             @relation("ScheduleOwner", fields: [ownerId], references: [id])
  ownerId        String?
  name           String
  description    String?
  type           ScheduleType
  frequency      ScheduleFrequency
  nextRun        DateTime
  lastRun        DateTime?
  isActive       Boolean           @default(true)
  options        Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model PolicyDocument {
  id                String          @id @default(cuid())
  organization      Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId    String
  owner             User            @relation(fields: [ownerId], references: [id])
  ownerId           String
  title             String
  description       String?
  category          String?
  tags              String[]        @default([])
  reviewCadenceDays Int?
  currentVersion    PolicyVersion?  @relation("CurrentPolicyVersion", fields: [currentVersionId], references: [id])
  currentVersionId  String?         @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  versions          PolicyVersion[]
}

model PolicyVersion {
  id            String              @id @default(cuid())
  document      PolicyDocument      @relation(fields: [policyId], references: [id], onDelete: Cascade)
  policyId      String
  versionNumber Int
  label         String?
  status        PolicyVersionStatus @default(DRAFT)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     User                @relation("CreatedPolicyVersions", fields: [createdById], references: [id])
  createdById   String
  submittedAt   DateTime?
  submittedBy   User?               @relation("SubmittedPolicyVersions", fields: [submittedById], references: [id])
  submittedById String?
  approvedAt    DateTime?
  approvedBy    User?               @relation("ApprovedPolicyVersions", fields: [approvedById], references: [id])
  approvedById  String?
  effectiveAt   DateTime?
  notes         String?
  storagePath   String
  originalName  String
  mimeType      String
  fileSizeBytes Int
  checksum      String?
  isCurrent     Boolean             @default(false)
  approvals     PolicyApproval[]
  currentFor    PolicyDocument?     @relation("CurrentPolicyVersion")
  supersedes    PolicyVersion?      @relation("PolicyVersionSupersedes", fields: [supersedesId], references: [id])
  supersedesId  String?
  supersededBy  PolicyVersion[]     @relation("PolicyVersionSupersedes")

  @@unique([policyId, versionNumber])
}

model PolicyApproval {
  id              String               @id @default(cuid())
  version         PolicyVersion        @relation(fields: [policyVersionId], references: [id], onDelete: Cascade)
  policyVersionId String
  approver        User                 @relation(fields: [approverId], references: [id])
  approverId      String
  status          PolicyApprovalStatus @default(PENDING)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  decidedAt       DateTime?
  decisionComment String?

  @@unique([policyVersionId, approverId])
}

enum ImpactLevel {
  LOW
  MODERATE
  HIGH
}

enum IntegrationConnectionStatus {
  PENDING
  CONNECTED
  ERROR
}

enum ControlMappingOrigin {
  SEED
  ALGO
  MANUAL
}

enum UserRole {
  ADMIN
  ANALYST
  AUDITOR
  READ_ONLY
}

enum FrameworkFamily {
  NIST
  CIS
  PCI
  CUSTOM
}

enum ControlPriority {
  P0
  P1
  P2
  P3
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  COMPLETE
}

enum ControlStatus {
  UNASSESSED
  SATISFIED
  PARTIAL
  UNSATISFIED
  NOT_APPLICABLE
}

enum EvidenceStatus {
  PENDING
  APPROVED
  ARCHIVED
  QUARANTINED
}

enum EvidenceStorageProvider {
  S3
  LOCAL
}

enum EvidenceUploadStatus {
  PENDING
  UPLOADED
  CONFIRMED
  EXPIRED
}

enum EvidenceIngestionStatus {
  PENDING
  PROCESSING
  COMPLETED
  QUARANTINED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  COMPLETE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportFormat {
  HTML
  PDF
}

enum IntegrationProvider {
  JIRA
  SERVICENOW
}

enum ScheduleType {
  EVIDENCE_REVIEW_REMINDER
  RECURRING_ASSESSMENT
  AGENT_HEALTH_CHECK
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  CUSTOM
}

enum PolicyVersionStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  REJECTED
  ARCHIVED
}

enum PolicyApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
